{"version":3,"sources":["components/utils/dialog/dialog-view.js","components/utils/dialog/dialog-container.js","components/main/main-view.js","components/utils/fullPageDialog/fullPageDialog-view.js","App.js","serviceWorker.js","index.js","voldemort.png"],"names":["Transition","React","forwardRef","props","ref","Slide","direction","DialogView","open","variant","onClose","onUpload","properties","title","uploadText","submitText","passwordLabel","passwordAlert","validationErrorText","getProperties","useState","selectedFile","setSelectedFile","password","setPassword","requiredFieldMissing","setRequiredFieldMissing","onChangeHandler","event","file","target","files","loaded","handleUpload","a","length","handleClose","Dialog","TransitionComponent","aria-labelledby","aria-describedby","DialogTitle","style","backgroundColor","color","id","Divider","DialogContent","DialogContentText","fontStyle","fontSize","Button","onClick","document","getElementById","click","type","name","onChange","display","multiple","marginLeft","TextField","margin","label","fullWidth","pass","value","DialogActions","DialogContainer","getFileExtension","console","log","split","pop","cleanUp","url","filename","sendRequest","response","data","params","fetch","encodeURIComponent","axios","post","delete","FormData","append","baseUrl","fileExtension","x","res","status","blob","fileBlob","download","Main","setOpen","setVariant","class","src","logo","alt","className","useStyles","makeStyles","theme","appBar","position","spacing","flex","FullScreenDialog","classes","window","fullScreen","AppBar","Toolbar","IconButton","edge","aria-label","Typography","autoFocus","textAlign","marginTop","App","Boolean","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message","module","exports"],"mappings":"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","file":"static/js/main.b5afa22b.chunk.js","sourcesContent":["import React from 'react';\nimport {useState} from 'react';\nimport Button from '@material-ui/core/Button';\nimport Dialog from '@material-ui/core/Dialog';\nimport TextField from '@material-ui/core/TextField';\nimport Divider from '@material-ui/core/Divider';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport Slide from '@material-ui/core/Slide';\nimport './dialog-view.css';\n\nconst Transition = React.forwardRef(function Transition(props, ref) {\n  return <Slide direction=\"up\" ref={ref} {...props} />;\n});\n\nconst getProperties = variant => {\n    switch(variant) {\n        case 'horcruxify':\n            return {\n              title: 'Horcruxify', \n              uploadText: 'Upload a file', \n              submitText: 'Horcruxify',\n              passwordLabel: 'Enter a strong password',\n              passwordAlert: 'This password will be used as the key for encrypting the file. Do not forget it.',\n              validationErrorText: 'You must give both password and a file to make it work!!!'\n            };\n        case 'de-horcruxify':\n            return {\n              title: 'De-Horcruxify', \n              uploadText: 'Upload all 7 horcrux files', \n              submitText: 'De-Horcruxify',\n              passwordLabel: 'Enter the password',\n              passwordAlert: 'The password you entered when you made the horcruxes. Wrong password won\\'t retrieve the original file',\n              validationErrorText: 'You must give both password and all 7 horcrux files to make it work!!!'\n            };\n        default:\n            return {};\n    }\n}\n\nconst DialogView = (props) => {\n  \n  const {open, variant, onClose, onUpload} = props;\n\n  const properties = getProperties(variant);\n  const [selectedFile, setSelectedFile] = useState({selectedFile: null});\n  const [password, setPassword] = useState(null);\n  const [requiredFieldMissing, setRequiredFieldMissing] = useState(false);\n\n  const onChangeHandler = event => {\n    if(variant === 'horcruxify'){\n      const file = event.target.files[0];\n      setSelectedFile({selectedFile: file, loaded: 0});\n    }\n    else{\n      setSelectedFile({selectedFile: event.target.files})\n    }\n  };\n\n  const handleUpload = async () => {\n    if(variant === 'horcruxify' && (!selectedFile.selectedFile || !password)){\n      setRequiredFieldMissing(true);\n      return;\n    }\n    if(variant === 'de-horcruxify' && (!selectedFile.selectedFile || selectedFile.selectedFile.length < 7 || !password)){\n      setRequiredFieldMissing(true);\n      return;\n    }\n    setRequiredFieldMissing(false);\n    await onUpload(selectedFile, password, variant);\n    handleClose();\n  };\n\n  const passwordOnChange = event => {\n    const pass = event.target.value;\n    setPassword(pass);\n  }\n\n  const handleUploadWrapperClick = (event) => {\n    document.getElementById('hiddenFileInput').click();\n  }\n\n  const handleClose = () => {\n    setRequiredFieldMissing(false);\n    setSelectedFile({selectedFile: null});\n    setPassword(null);\n    onClose();\n  }\n\n  return (\n    <div>\n      <Dialog\n        open={open}\n        TransitionComponent={Transition}\n        onClose={handleClose}\n        aria-labelledby=\"alert-dialog-slide-title\"\n        aria-describedby=\"alert-dialog-slide-description\"\n      >\n        <DialogTitle style={{backgroundColor: '#EEE9E9', color: '#330000'}}  id=\"alert-dialog-slide-title\">{properties.title}</DialogTitle>\n        <Divider />\n        <DialogContent style={{backgroundColor: '#EEE9E9', color: '#330000'}}>\n          {requiredFieldMissing && (\n            <DialogContentText style={{color: 'red', fontStyle: 'bold', fontSize: '1rem'}}>\n              {properties.validationErrorText}\n            </DialogContentText>\n          )}\n\n          <Button variant=\"contained\" color=\"primary\" onClick={handleUploadWrapperClick}>{properties.uploadText}</Button>\n          {variant === 'horcruxify' ? (\n            <input id=\"hiddenFileInput\" type=\"file\" name=\"file\" onChange={onChangeHandler} style={{display: 'none'}}/>\n            ) : (\n              <input id=\"hiddenFileInput\" type=\"file\" name=\"file\" multiple onChange={onChangeHandler} style={{display: 'none'}}/>\n            )\n          }\n          {variant === 'horcruxify' && selectedFile.selectedFile && (\n            <span style={{marginLeft: '10px'}}>\n              {selectedFile.selectedFile.name}\n            </span>\n          )}\n          {variant === 'de-horcruxify' && selectedFile.selectedFile  && (\n            <span style={{marginLeft: '10px'}}>\n              {selectedFile.selectedFile.length} files\n            </span>\n          )}\n\n          <div>\n            <TextField id=\"standard-basic\" margin=\"dense\" label={properties.passwordLabel} type=\"password\" fullWidth onChange={passwordOnChange} />\n            <DialogContentText style={{color: 'red', fontStyle: 'italic', fontSize: '.8rem'}}>{properties.passwordAlert}</DialogContentText>\n          </div>\n          \n        </DialogContent>\n        <DialogActions style={{backgroundColor: '#EEE9E9', color: 'white'}}>\n          <Button onClick={handleClose} variant=\"outlined\" color=\"secondary\">\n            Cancel\n          </Button>\n          <Button onClick={handleUpload} variant=\"outlined\" color=\"primary\">\n            {properties.submitText}\n          </Button>\n        </DialogActions>\n      </Dialog>\n    </div>\n  );\n};\n\nexport default DialogView\n","import React from 'react';\nimport axios from 'axios';\nimport download from 'js-file-download';\nimport DialogView from './dialog-view';\n\nconst DialogContainer = props => {\n    const getFileExtension = (file) => {\n        console.log(file);\n        const parts = file.name.split('.');\n        return parts.pop();\n      }\n\n    const cleanUp = async (url, filename) => {\n        const response = await sendRequest('DELETE', url, null, {filename : filename});\n        return response;\n      } \n\n    const sendRequest = async (type, url, data, params) => {\n      switch(type){\n          case 'GET':\n              return await fetch(`${url}?filename=${encodeURIComponent(params.filename)}`)\n          case 'POST':\n              return await axios.post(url, data, {})\n          case 'DELETE':\n              return await axios.delete(url, {params: params});\n          default:\n              return;\n      }\n    }\n\n    const onUpload = async (selectedFile, password, variant) => {\n      const data = new FormData();\n      let baseUrl, fileExtension;\n      const serverUrl = process.env.NODE_ENV === 'development' ? `http://localhost:5001` : ''\n      if(variant === 'horcruxify'){\n          data.append('file', selectedFile.selectedFile);\n          baseUrl = `${serverUrl}/horcruxify`\n          fileExtension = getFileExtension(selectedFile.selectedFile);\n          data.append('fileExtension', fileExtension);\n      }\n      else{\n          for(var x = 0; x < selectedFile.selectedFile.length; x++){\n              data.append('file', selectedFile.selectedFile[x]);\n          }\n          baseUrl = `${serverUrl}/dehorcruxify`;\n          fileExtension = getFileExtension(selectedFile.selectedFile[0]);\n          data.append('fileExtension', fileExtension);\n      }\n      data.append('password', password);\n      const res = await sendRequest('POST', baseUrl, data, {});\n      if(res.status === 200){\n          const response = await sendRequest('GET', baseUrl, null, {filename: res.data});\n          const fileBlob = await response.blob();\n          download(fileBlob, variant === 'horcruxify' ? 'horcruxes.zip' : `original.${fileExtension}`);\n          console.log('file should be downloaded by now!!');\n          await cleanUp(baseUrl, res.data);\n      }\n    }\n\n    return (\n        <DialogView onUpload={onUpload} {...props}/>\n    );\n    \n}\n\nexport default DialogContainer;","import React from 'react';\nimport {useState} from 'react';\nimport Button from '@material-ui/core/Button';\nimport logo from '../../voldemort.png';\nimport '../../App.css';\nimport './main-view.css';\nimport DialogView from '../utils/dialog';\n\nconst Main = (props) => {\n  const [open, setOpen] = useState(false);\n  const [variant, setVariant] = useState('horcruxify');\n\n\n  const handleOpenHorcruxify = () => {\n    setVariant('horcruxify');\n    setOpen(true);\n  }\n\n  const handleOpenDeHorcruxify = () => {\n    setVariant('de-horcruxify');\n    setOpen(true);\n  }\n\n  const handleClose = () => {\n    setOpen(false);\n  };\n  return (\n        <div class=\"container\">\n            <img src={logo} alt=\"logo\" className=\"App-logo\" />\n            <div class=\"button-container\">\n                <span class=\"base-button\">\n                  <Button style={{backgroundColor:'#253814'}} variant=\"contained\" color=\"primary\" onClick={handleOpenHorcruxify}>Horcruxify</Button>\n                </span>\n                <span>\n                  <Button style={{backgroundColor:'#253814'}} variant=\"contained\" color=\"primary\" onClick={handleOpenDeHorcruxify}>De-Horcruxify</Button>\n                </span>\n                \n\n                <DialogView \n                    onClose={handleClose}\n                    {...{open, variant}}\n                />\n            </div>\n            \n        </div>\n    );\n};\n\nexport default Main;","import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Button from '@material-ui/core/Button';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport IconButton from '@material-ui/core/IconButton';\nimport Typography from '@material-ui/core/Typography';\nimport CloseIcon from '@material-ui/icons/Close';\nimport Slide from '@material-ui/core/Slide';\n\nconst useStyles = makeStyles((theme) => ({\n  appBar: {\n    position: 'relative',\n  },\n  title: {\n    marginLeft: theme.spacing(2),\n    flex: 1,\n  },\n}));\n\nconst Transition = React.forwardRef(function Transition(props, ref) {\n  return <Slide direction=\"up\" ref={ref} {...props} />;\n});\n\nexport default function FullScreenDialog() {\n  const classes = useStyles();\n  const [open, setOpen] = React.useState(false);\n\n  const handleClickOpen = () => {\n    setOpen(true);\n  };\n\n  const handleClose = () => {\n    setOpen(false);\n  };\n\n  return (\n    <div>\n      <Button variant=\"text\" color=\"primary\" onClick={handleClickOpen}>\n        What is it?\n      </Button>\n      <Button variant=\"text\" color=\"secondary\" onClick={() => {window.open('https://github.com/trifiasco/horcruxifier-web-backend/issues')}}>Report a bug</Button>\n      <Dialog fullScreen open={open} onClose={handleClose} TransitionComponent={Transition}>\n        <AppBar className={classes.appBar}>\n          <Toolbar>\n            <IconButton edge=\"start\" color=\"inherit\" onClick={handleClose} aria-label=\"close\">\n              <CloseIcon />\n            </IconButton>\n            <Typography variant=\"h6\" className={classes.title}>\n              Horcruxifier: A smart layer of security to protect your precious files!!!\n            </Typography>\n            <Button autoFocus variant=\"outlined\" color=\"default\" onClick={handleClose}>\n              Get me back\n            </Button>\n          </Toolbar>\n        </AppBar>\n\n        <DialogContent>\n          <DialogContentText style={{color:'black'}}>\n            <h1>Motivation</h1>\n                <p>\n                    Everyone has some files they want secured. How can you absolutely make sure that those are secured? Well, hypothetically you can't. Though there are multiple ways you can \"Almost\" make sure that your files are secured.\n                </p>\n                <p>\n                    I don't know if anyone ever thought of this before or not. But J. K. Rowling, the creator of Harry Potter, showed us a wonderful way to add a layer of security over the traditional encryption schemes. <b>Remember how Voldemort wanted to make sure that it's almost impossible to kill him? Yess... By making Horcruxes!!!</b>\n                </p>\n\n                <h3>And that's what this web application does!!!</h3>\n            \n            <h1>How does it works?</h1>\n            <p>\n                Basically this app takes a file and a password from the user. Then runs an encryption on the file using the password as the encryption key. Then comes the extra layer - \n                <ul>\n                    <li>Click on the <b>HORCRUXIFIY</b> button</li>\n                    <li>Upload a file of your choice, and give a strong password. Then submit</li>\n                    <li>The app takes your file and password, runs an encryption routine.</li>\n                    <li><b>After the encryption, this app divides the encrypted file into several chunks</b> (Actually 7, because Voldemort did so!!)</li>\n                    <li>Each chunk is written into files named after the names of the horcruxes. (fan tribute to Harry Potter ^_^)</li>\n                    <li>After that, this app zips those files, and returns that to you prompting download.</li>\n                    <li>After downloading, if you unzip the folder, you will find 7 different encrypted files.</li>\n                </ul> \n            </p>\n            <p>\n                <h4>Well, now what??</h4>\n                Now you have your file - <b>Encrypted and divided into multiple files</b>. You can the scatter the files into different locations(or not, your wish).\n                <b>If someone has to hack your file, they will have to collect all 7 files and also the password you used for encryption.</b> I would say that would not be easy!!\n            </p>\n\n            <p>\n                <h4>What if I want to see my original file??</h4>\n                Fear not!! This application works both ways.\n                <ul>\n                    <li>Click on the <b>DE-HORCRUXIFY</b> button.</li>\n                    <li>You have to now upload - All the 7 encrypted files.</li>\n                    <li>Give the original password</li>\n                    <li>Submit, and your original file should be downloaded.</li>\n                </ul>\n            </p>\n            <h1>Limitations</h1>\n            <p>\n                This is a personal project, done for purely fun purpose. I have tested against <b>images, pdfs, text</b> files. I think it should work for other files too.\n                If you use it and find any bug, please report it.\n            </p>\n            <Button variant=\"contained\" color=\"secondary\" onClick={() => {window.open('https://github.com/trifiasco/horcruxifier-web-backend/issues')}}>Report a bug</Button>\n            <div style={{textAlign:\"center\", marginTop:\"20px\"}}>\n              <Button variant=\"text\" color=\"primary\" onClick={() => {window.open('https://github.com/trifiasco/horcruxifier-web-client')}}>Source code - frontend</Button>\n              <Button variant=\"text\" color=\"primary\" onClick={() => {window.open('https://github.com/trifiasco/horcruxifier-web-backend')}}>Source code - backend</Button>\n            </div>\n            \n\n          </DialogContentText>\n        </DialogContent>\n      </Dialog>\n    </div>\n  );\n}","import React from 'react';\nimport './App.css';\nimport Main from './components/main';\nimport FullPageDialog from './components/utils/fullPageDialog';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <div class=\"top-bar\">\n        <FullPageDialog />\n      </div>\n      \n      <header className=\"App-header\">\n        <Main />\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/voldemort.45c82cfb.png\";"],"sourceRoot":""}
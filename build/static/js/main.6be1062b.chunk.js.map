{"version":3,"sources":["logo.svg","components/utils/dialog/dialog-view.js","components/utils/dialog/dialog-container.js","components/main/main-view.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Transition","React","forwardRef","props","ref","Slide","direction","DialogView","open","variant","onClose","onUpload","properties","title","sectionHeader","getProperties","useState","selectedFile","setSelectedFile","password","setPassword","onChangeHandler","event","file","target","files","loaded","handleUpload","a","Dialog","TransitionComponent","keepMounted","aria-labelledby","aria-describedby","DialogTitle","id","DialogContent","type","name","onChange","multiple","TextField","label","pass","value","DialogContentText","style","color","DialogActions","Button","onClick","DialogContainer","getFileExtension","console","log","split","pop","cleanUp","url","filename","sendRequest","response","data","params","fetch","encodeURIComponent","axios","post","delete","FormData","append","baseUrl","fileExtension","x","length","res","status","blob","fileBlob","download","Main","setOpen","setVariant","src","logo","alt","className","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.6be1062b.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\nimport {useState} from 'react';\nimport Button from '@material-ui/core/Button';\nimport Dialog from '@material-ui/core/Dialog';\nimport TextField from '@material-ui/core/TextField';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport Slide from '@material-ui/core/Slide';\n\nconst Transition = React.forwardRef(function Transition(props, ref) {\n  return <Slide direction=\"up\" ref={ref} {...props} />;\n});\n\nconst getProperties = variant => {\n    switch(variant) {\n        case 'horcruxify':\n            return {title: 'Horcruxify', sectionHeader: 'Upload a file'};\n        case 'de-horcruxify':\n            return {title: 'De-Horcruxify', sectionHeader: 'Upload a folder'};\n        default:\n            return {};\n    }\n}\n\nconst DialogView = (props) => {\n  \n  const {open, variant, onClose, onUpload} = props;\n\n  const properties = getProperties(variant);\n  const [selectedFile, setSelectedFile] = useState({selectedFile: null});\n  const [password, setPassword] = useState('');\n\n  const onChangeHandler = event => {\n    if(variant === 'horcruxify'){\n      const file = event.target.files[0];\n      setSelectedFile({selectedFile: file, loaded: 0});\n    }\n    else{\n      setSelectedFile({selectedFile: event.target.files})\n    }\n  };\n\n  const handleUpload = async () => {\n    await onUpload(selectedFile, password, variant);\n    setSelectedFile({selectedFile:null});\n    setPassword('');\n    onClose();\n  };\n\n  const passwordOnChange = event => {\n    const pass = event.target.value;\n    setPassword(pass);\n  }\n\n  return (\n    <div>\n      <Dialog\n        open={open}\n        TransitionComponent={Transition}\n        keepMounted\n        onClose={onClose}\n        aria-labelledby=\"alert-dialog-slide-title\"\n        aria-describedby=\"alert-dialog-slide-description\"\n      >\n        <DialogTitle id=\"alert-dialog-slide-title\">{properties.title}</DialogTitle>\n        <DialogContent>\n          {/* <DialogContentText id=\"alert-dialog-slide-description\">\n            Let Google help apps determine location. This means sending anonymous location data to\n            Google, even when no apps are running.\n          </DialogContentText> */}\n          {variant === 'horcruxify' ? (\n            <input type=\"file\" name=\"file\" onChange={onChangeHandler}/>\n            ) : (\n              <input type=\"file\" name=\"file\" multiple onChange={onChangeHandler}/>\n            )\n          }\n\n          <div>\n          <TextField id=\"standard-basic\" label=\"Enter a password\" onChange={passwordOnChange} />\n          <DialogContentText style={{color: 'red'}}>If you forget your password, you won't be able to de-horcruxify</DialogContentText>\n          </div>\n          \n        </DialogContent>\n        <DialogActions>\n          <Button onClick={onClose} color=\"primary\">\n            Cancel\n          </Button>\n          <Button onClick={handleUpload} color=\"primary\">\n            Process\n          </Button>\n        </DialogActions>\n      </Dialog>\n    </div>\n  );\n};\n\nexport default DialogView\n","import React from 'react';\nimport axios from 'axios';\nimport download from 'js-file-download';\nimport DialogView from './dialog-view';\n\nconst DialogContainer = props => {\n    const getFileExtension = (file) => {\n        console.log(file);\n        const parts = file.name.split('.');\n        return parts.pop();\n      }\n\n    const cleanUp = async (url, filename) => {\n        const response = await sendRequest('DELETE', url, null, {filename : filename});\n        return response;\n      } \n\n    const sendRequest = async (type, url, data, params) => {\n      switch(type){\n          case 'GET':\n              return await fetch(`${url}?filename=${encodeURIComponent(params.filename)}`)\n          case 'POST':\n              return await axios.post(url, data, {})\n          case 'DELETE':\n              return await axios.delete(url, {params: params});\n          default:\n              return;\n      }\n    }\n\n    const onUpload = async (selectedFile, password, variant) => {\n      const data = new FormData();\n      let baseUrl;\n      const serverUrl = process.env.NODE_ENV === 'development' ? `http://localhost:5001` : ''\n      if(variant === 'horcruxify'){\n          data.append('file', selectedFile.selectedFile);\n          baseUrl = `${serverUrl}/horcruxify`\n          const fileExtension = getFileExtension(selectedFile.selectedFile);\n          data.append('fileExtension', fileExtension);\n      }\n      else{\n          for(var x = 0; x < selectedFile.selectedFile.length; x++){\n              data.append('file', selectedFile.selectedFile[x]);\n          }\n          baseUrl = `${serverUrl}/dehorcruxify`;\n          const fileExtension = getFileExtension(selectedFile.selectedFile[0]);\n          data.append('fileExtension', fileExtension);\n      }\n      data.append('password', password);\n      const res = await sendRequest('POST', baseUrl, data, {});\n      if(res.status === 200){\n          const response = await sendRequest('GET', baseUrl, null, {filename: res.data});\n          const fileBlob = await response.blob();\n          download(fileBlob, variant === 'horcruxify' ? 'horcruxes.zip' : 'original.txt');\n          console.log('file should be downloaded by now!!');\n          await cleanUp(baseUrl, res.data);\n      }\n    }\n\n    return (\n        <DialogView onUpload={onUpload} {...props}/>\n    );\n    \n}\n\nexport default DialogContainer;","import React from 'react';\nimport {useState} from 'react';\nimport Button from '@material-ui/core/Button';\nimport logo from '../../logo.svg';\nimport '../../App.css';\nimport DialogView from '../utils/dialog';\n\nconst Main = (props) => {\n  const [open, setOpen] = useState(false);\n  const [variant, setVariant] = useState('horcruxify');\n\n\n  const handleOpenHorcruxify = () => {\n    setVariant('horcruxify');\n    setOpen(true);\n  }\n\n  const handleOpenDeHorcruxify = () => {\n    setVariant('de-horcruxify');\n    setOpen(true);\n  }\n\n  const handleClose = () => {\n    setOpen(false);\n  };\n  return (\n        <div>\n            <img src={logo} alt=\"logo\" className=\"App-logo\" />\n            <div>\n                <Button variant=\"contained\" color=\"primary\" onClick={handleOpenHorcruxify}>Horcruxify</Button>\n                <Button variant=\"contained\" color=\"primary\" onClick={handleOpenDeHorcruxify}>De-Horcruxify</Button>\n\n                <DialogView \n                    onClose={handleClose}\n                    {...{open, variant}}\n                />\n            </div>\n            \n        </div>\n    );\n};\n\nexport default Main;","import React from 'react';\nimport './App.css';\nimport Main from './components/main';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <Main />\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}